################################################################################
# Obsidian File                                                                #
#                                                                              #
# This file contains all the configuration information for an Obsidian         #
# inversion. Ensure that any files referenced in the sections below are in the #
#                                                                              # 
# same directory as this file, which must also be the directory from which     #
# obsidian is run.                                                             #
################################################################################


####################
# World Parameters #
####################
# This section contains the parameters that define the boundaries and behaviour
# of the world model.
[world]

# The x components of the world boundary in metres
# min, max 
xRange = 0 35326           

# The y components of the world boundary in metres
# min, max
yRange = 0 36679 

# The z components of the world boundary in metres
# min, max
depthRange = 0 12000

####################
# World Boundaries #
####################
# This section contains the variables that relate to the boundary surfaces that
# delineate different rock layers in the world model
[boundaries]

# Boundary offset CSV files. 1 file per boundary and space separated
offsets = EyreOffset.csv MurtaOffset.csv NamurOffset.csv ToolacheeOffset.csv BigLakeSuiteOffset.csv InnaminckaOffset.csv

# Boundary time CSV files. If useTimes is enabled, for layer 2 onwards, these
# files are interpreted as two way times rather than depths. First boundary is
# always depths. Leave blank if useTimes is off.
times = 

# Control point masks. These files determine the number of control points,
# their shape, and which control points vary and are fixed.
ctrlPointMasks = EyreCtrlMask.csv MurtaCtrlMask.csv NamurCtrlMask.csv ToolacheeCtrlMask.csv BigLakeSuiteCtrlMask.csv InnaminckaCtrlMask.csv

# Control point minimum. For each boundary, the minimun value a control point
# can take from the offset surface
ctrlPointMins = EyreCtrlMin.csv MurtaCtrlMin.csv NamurCtrlMin.csv ToolacheeCtrlMin.csv BigLakeSuiteCtrlMin.csv InnaminckaCtrlMin.csv

# Control point maximum. For each boundary, the maximum value a control point
# can take from the offset surface.
ctrlPointMaxs =EyreCtrlMax.csv MurtaCtrlMax.csv NamurCtrlMax.csv ToolacheeCtrlMax.csv BigLakeSuiteCtrlMax.csv InnaminckaCtrlMax.csv

# Standard deviations for for how the individual control points should vary.
# These numbers (one per boundary) are the square roots of the diagonal of the
# covariance matrix of a joint Gaussian over each layer's control points
uncoupledSDs = 100 200 200 200 300 10000

# Standard deviations for for how the individual control points should co-vary.
# These numbers (one per boundary) are the square roots of the off diagonal
# terms of the covariance matrix of a joint Gaussian over each layer's control
# points
coupledSDs = 0.0 0 0 0 0 0

# boundary "type", either normal or warped. warped boundaries are intended to
# be used as intrusion layers -- they are clipped differently and exaggerated
# in the z direction to produce structures consistent with granite intrusions
types = normal normal normal normal normal warped

# Flag to determine whether the offset files (exepct the top boundary) should
# be interpreted as two-way times rather than distances. This allows the use of
# processed seismic horizons without the need for depth conversion. Depth
# conversions happens implicitly within the algorithm based on each layers'
# p-wave velocity.
useTimes = false


#########
# Rocks #
#########
# This section contains the variables that relate to the various rock
# properties in each layer of the world model
[rocks] 

# Rock property means. The rock propetries for each layer are a multivariate
# (truncated) gaussian, and this is the mean vector for that gaussian. One file per layer
means = EyreRockMeans.csv MurtaRockMeans.csv NamurRockMeans.csv ToolacheeRockMeans.csv BigLakeSuiteRockMeans.csv InnaminckaRockMeans.csv

# Rock property minimum values. The PDF for rock properties is truncated beyond
# this maximum value. The MCMC will also never explore outside this boundary. 
mins =  EyreRockMins.csv MurtaRockMins.csv NamurRockMins.csv ToolacheeRockMins.csv BigLakeSuiteRockMins.csv InnaminckaRockMins.csv

# Rock property maximum values. The PDF for rock properties is truncated beyond
# this maximum value. The MCMC will also never explore outside this boundary. 
maxs = EyreRockMaxs.csv MurtaRockMaxs.csv NamurRockMaxs.csv ToolacheeRockMaxs.csv BigLakeSuiteRockMaxs.csv InnaminckaRockMaxs.csv

# Rock property covariances. Each layer has rock properties which are jointly
# Gaussian, and this propetry gives the covariance matrix for each. 
covariances = EyreRockCov.csv MurtaRockCov.csv NamurRockCov.csv ToolacheeRockCov.csv BigLakeSuiteRockCov.csv InnaminckaRockCov.csv

# Rock property masks. Allows the user to turn on or off varying of rock
# properties on a per-layer basis. If a rock property is masked out, it will be
# fixed at it's mean value and will be ignored by the MCMC
masks = EyreRockMask.csv MurtaRockMask.csv NamurRockMask.csv ToolacheeRockMask.csv BigLakeSuiteRockMask.csv InnaminckaRockMask.csv


##############
# Simulation #
##############
# Rather than using real sensor inputs, it is possible to use simulated inputs
# from a "true" model than has been input in this section.k:w
[simulation]

#Control points: These files give the true z position of the control points
#with respect to the offset files. Leave blank if using real data.
ctrlPoints = 

# The true rock properties for each simulated layer. Leave blank if using real
# data 
layerProperties = 


[initialisation]
# optional initialisation, a file for each layer of the t=1 chain of each
# stack. Ie stack1layer1.csv, stack1layer2.csv, stack2layer1.csv, stack2layer2.csv etc.
ctrlPoints =
layerProperties = 


###########
# Gravity #
###########
# Section containing the variables for the gravity sensor and forward model
[gravity] 

# Enable gravity as a sensor, if disabled, all the other gravity inputs are
# ignored.
enabled = true

# Locations for the gravity sensors as a csv file
sensorLocations= gravSensors.csv

# The z component of the G field as taken by the sensors defined in locations.
sensorReadings = gravReadings.csv

# The resolution of the forward model voxelisation of the world
# x y z
gridResolution = 20 20 60

# voxelisation supersample; horizontal antialiasing; depricated; do not use
supersample = 0

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for gravity. Alpha parameter
noiseAlpha = 5

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for gravity. Beta parameter.
noiseBeta = 0.5


#############
# Magnetism #
#############
# Section containing the variables for the magnetics sensor and forward model
[magnetism]


# Enable magnetics as a sensor, if disabled, all the other gravity inputs are
# ignored.
enabled = true

# Locations of the magnetics sensors as a csv file.
sensorLocations = magSensors.csv

# Readings of the total magnetic anomaly for each of the sensors define in
# sensorLocations.
sensorReadings = magReadings.csv

# The resolution of the forward model voxelisation of the world
# x y z
gridResolution = 20 20 40

# voxelisation supersample; horizontal antialiasing; depricated; do not use
supersample = 0

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for gravity. Alpha parameter
noiseAlpha = 1.25

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for gravity. Beta parameter
noiseBeta = 1

# The ambient magnetic field in nanotesla. Assumed constant over the world.
# east, north, down
magneticField = 3.5929e3 2.755e4 -4.78e4


###################################
# 1D Anisotropic Magnetotellurics #
###################################
# Section containing the variables for the 1D MT model and sensor input.
[mtaniso]


# Enable MT as a sensor, if disabled, all the other MT inputs are
# ignored.
enabled = true

# File containing the locations *and Frequencies* of the magnetotelluric
# sensors.
sensorLocations = mtSensors.csv

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for MT. Alpha parameter
noiseAlpha = 5

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for MT. Beta parameter
noiseBeta = 0.5

# if true, consider only the x component of resistivity and assume an isotropic
# model. Resistivity Y, Resistivity Z and phase should be automatically masked.
ignoreAniso = true 

# The sensor readings associated with each location and frequency defined
# above. For details see the example CSV.
sensorReadings = mtReadings.csv

#########################
# 1D Seismic Reflection #
#########################
# Section containing the variables for the 1D Seismic model and sensor data.
[seismic1d]


# Enable seismic as a sensor, if disabled, all the other seismic inputs are
# ignored.
enabled = false

# List of locations for the seismic 2-way time sensors
sensorLocations = seismic1dLocations.csv

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for MT. Alpha parameter
noiseAlpha = 5

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for MT. Beta parameter
noiseBeta = 0.5

# Sensor reading containing the two way times for each layer and for each
# sensor as specified in sensorLocations. For details see
# the example file.
sensorReadings =

##################
# Contact Points #
##################
# Section containing the variables for the drill hole contact point data
[contactpoint]

# Enable contact points as a sensor. If disabled, all the other contact point
# inputs will be ignored.
enabled = false

#  The x,y,z locations and layers intersected by the drill holes
sensorLocations = contactpointLocations.csv

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for MT. Alpha parameter
noiseAlpha = 5

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for MT. Beta parameter
noiseBeta = 0.5

# Sensor reading containing the contact point depths for the layers and
# locations defined in sensorLocations. For details see the example file.
sensorReadings =


###########
# Thermal #
###########
# Section containing the variables for the thermal (temperature) sensor and
# model
[thermal]


# Enable temperature as a sensor. If disabled, all other thermal inputs will be
# ignored.
enabled = true

# CSV file containing a list of temperature sensor locations.
sensorLocations = thermalSensors.csv

# CSV file containing the temperatures corresponding to each sensor location
# defined in the sensorLocations input file
sensorReadings = thermalReadings.csv

# The surface temperature boundary condition (in kelvin) to use in the forward
# model simulations
surfaceTemperature = 290.15

# The lower boundary condition. This is in Kelvin, unless
# lowerBoundaryIsHeatFlow is true, in which case it is interpreted as a heat
# flow in milliwatts per m^2
lowerBoundary = 0.1

# interpert lower boundary condition as heat flow rather than temperature
lowerBoundaryIsHeatFlow = true

# voxelisation resolution of the thermal forward model
# xres yres zres
gridResolution = 13 13 25

# voxelisation supersample; horizontal antialiasing; depricated; do not use
supersample = 0

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for MT. Alpha parameter
noiseAlpha = 10

# noise inverse gamma: The parameters of the inverse gamma distribution used to
# compute the likelihood function for MT. Beta parameter
noiseBeta = 0.2


########
# MCMC #
########
# Section controlling how the MCMC is run.
[mcmc]

#The number of chains in a sequence of temperatures. The first chain has
#temperature=1, and then all subsequent chains have a temperature equal to
#initialTempFactor times the previous temperature.
chains = 16

# The number of totally disconnected sets of chains. Total chains is the
# product of the chains variable and the stacks variable. Different stacks are
# compared to check convergence.
stacks = 2

# The walltime in seconds of the MCMC run. Obsidian will quit after this number
# of seconds has elapsed
wallTime = 86400

# The number of states added to the highest temperature chain before it
# initiates a swap with the next coldest chain. This will propagate all the way
# down to the lowest temperature chain.
swapInterval = 50

# the factor that defines the geometric progression of chain temperatures for
# each stack. t_n+1 = t_n * initialTempFactor, with t_1 = 1
initialTempFactor = 1.1

# The swap rate that the chains are trying to reach. Note that 0.24 is optimal
# for an infinite dimensional problem, 0.5 is optimal for a 1 dimensional
# problem.
betaOptimalSwapRate = 0.24

# The rate at which beta (1/temperature) adapts. This is a multiplicative
# factor which scales the difference between the optimal swap rate and the real
# swap rate.
betaAdaptRate = 0.04

# The minimum multiplicative factor by which beta can adapt.
betaMinFactor = 0.8

# The maximum multiplicative factor by which beta can adapt.
betaMaxFactor = 1.25

# The number of states appended to the chain between adaptions of beta.
betaAdaptInterval = 500

# The time scale over which the adaption length diminishes. After 10 times this
# value, the adaption rate in approximately half. Also is equal to the number
# of states used to calculate the adapt and swap rates in a sliding window.
adaptionLength = 100000

# Then number of states computed before they are written to disk. Worst case
# would be to lose this many states upon a hard crash of the obsidian server.
cacheLength = 1000

############
# Proposal #
############
# Section controlling the proposal distribution, its width, and the adaption of
# that width
[proposal]


# The initial value of sigma (the proposal width) for the lowest temperature
# chain
initialSigma = 0.1

# the factor that defines the geometric progression of chain sigmas for
# each stack. s_n+1 = s_n * initialSigmaFactor, with s_1 = initialSigma
initialSigmaFactor = 1.1

# The maximum multiplicative factor by which sigma can adapt
maxFactor = 1.25

# The minimum multiplicative factor by which sigma can adapt
minFactor = 0.8

# The acceptance rate that the chains are trying to reach. Note that 0.24 is optimal
# for an infinite dimensional problem, 0.5 is optimal for a 1 dimensional
# problem.
optimalAccept = 0.24

# The rate at which sigma adapts. This is a multiplicative factor which scales
# the difference between the optimal accept rate and the real accept rate.
adaptRate = 0.2

# The number of states appended to the chain between adaptions of sigma
adaptInterval = 250
