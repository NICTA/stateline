[world]

# min, max
xRange = 0 50000

# min, max
yRange = 0 50000

# min, max
depthRange = 0 8000

[boundaries]

# m x n matrix; one for each layer; z values
# boundaries are divided into m x n grid for each layer and these specify the depth
# csv 0, 0 ... 0, n
# ^ +------------+
# | |            |
# y |            |
#   +------------+
# 0,0  x -- >
# csv m, 0 ... m, n
# y is north
# x is east
# z is down
offsets = boundary1Offset.csv boundary2Offset.csv boundary3Offset.csv boundary4Offset.csv

# Same as offsets. 
# If useTimes are enabled, Use these matrices instead and treat them as times(s). First item provided is the offset for the first layer.
# Offsets are built cumulatively as PWaveVelocity x times. First offset layer defining the surface must be present.
# see offset for orientation.
times = boundary1Offset.csv boundary2Time.csv boundary3Time.csv boundary4Time.csv

# masks for control points, cxd matrix; also defines size for control points
# see offset for orientation.
ctrlPointMasks = ctrlPoint1Mask.csv ctrlPoint2Mask.csv ctrlPoint3Mask.csv ctrlPoint4Mask.csv

# absolute minimum value for the control points
ctrlPointMins = ctrlPoint1Mins.csv ctrlPoint2Mins.csv ctrlPoint3Mins.csv ctrlPoint4Mins.csv

# absolute maximum value for the control points
ctrlPointMaxs = ctrlPoint1Maxs.csv ctrlPoint2Maxs.csv ctrlPoint3Maxs.csv ctrlPoint4Maxs.csv

# SDs for how the individual control points should vary
uncoupledSDs = 1.0 1.0 1.0 500.0

# SDs for how the control points must vary together
coupledSDs = 0.0 0.0 0.0 0.0

# type of boundary. normal means normal. warped can be non-continuous
types = normal normal normal warped

# see times
useTimes = false

[rocks]

# nLayers * 9x1
# Order:
# Density, LogSusceptibility, ThermalConductivity, ThermalProductivity, LogResistivityX,...
# ...LogResistivityY, LogResistivityZ, ResistivityPhase, PWaveVelocity
means = layer1RockMeans.csv layer2RockMeans.csv layer3RockMeans.csv layer4RockMeans.csv

# minimum value for these rock properties
mins = layer1RockMins.csv layer2RockMins.csv layer3RockMins.csv layer4RockMins.csv

# maximum value for these rock properties
maxs = layer1RockMaxs.csv layer2RockMaxs.csv layer3RockMaxs.csv layer4RockMaxs.csv

# nLayers * 9x9
covariances = layer1RockCov.csv layer2RockCov.csv layer3RockCov.csv layer4RockCov.csv

# nLayers * 9x1
masks = layer1RockMask.csv layer2RockMask.csv layer3RockMask.csv layer4RockMask.csv

[simulation]

ctrlPoints = ctrlPoints1True.csv ctrlPoints2True.csv ctrlPoints3True.csv ctrlPoints4True.csv

# rock properties for each layer
layerProperties = layer1RockTrue.csv layer2RockTrue.csv layer3RockTrue.csv layer4RockTrue.csv

[initialisation]
# optional initialisation, a file for each layer of the t=1 chain of each
# stack. Ie stack1layer1.csv, stack1layer2.csv, stack2layer1.csv, stack2layer2.csv etc.
ctrlPoints =
layerProperties = 


[gravity]

enabled = true

# csv nLocations * x, y, z
sensorLocations= gravSensors.csv

# csv nLocations * reading
sensorReadings =

# voxelisation xres yres zres
gridResolution = 20 20 20

# voxelisation supersample; horizontal antialiasing; depricated; do not use
supersample = 0

# noise inverse gamma
noiseAlpha = 1.0
noiseBeta = 1.0


[magnetism]

enabled = false

# csv nLocations * x, y, z
sensorLocations = magSensors.csv

# voxelisation xres yres zres
gridResolution = 20 20 20

# voxelisation supersample; horizontal antialiasing; depricated; do not use
supersample = 0

# noise inverse gamma
noiseAlpha = 3.0
noiseBeta = 3.0

# magnetic field east, north, down
magneticField = 3.5929e3 2.755e4 -4.78e4

# csv nLocations x 1 matrix
sensorReadings =

[mtaniso]
enabled = false

# csv nLocations * x, y, z, f1, f2, ..., fm; ragged matrix
sensorLocations = mtSensors.csv

# noise inverse gamma
noiseAlpha = 2.0
noiseBeta = 3.0

ignoreAniso = false

# csv nLocations x reading(f1), ..., reading(fm); ; ragged matrix
sensorReadings =

[seismic1d]
enabled = false

# csv nLocations * x, y, i1, ..., im ; i is the layer no starting 0; ragged matrix
sensorLocations = seismic1dLocations.csv

# noise inverse gamma
noiseAlpha = 2.0
noiseBeta = 3.0

# csv nLoacations * reading(i1), ... , reading(im); ragged matrix
sensorReadings =

[contactpoint]
enabled = false

# csv nLocations * x, y, i1, ..., im ; i is the layer no starting 0; ragged matrix
sensorLocations = contactpointLocations.csv

# noise inverse gamma
noiseAlpha = 2.0
noiseBeta = 3.0

# csv nLoacations * reading(i1), ... , reading(im); ragged matrix
sensorReadings =

[thermal]

enabled = false

# csv matrix nLocations * x, y, z
sensorLocations = thermalSensors.csv

# kelvin
surfaceTemperature = 300.0

# kelvin
lowerBoundary = 0.05

# interpert lower boundary condition as heat flow rather than temperature
lowerBoundaryIsHeatFlow = true

# voxelisation xres yres zres
gridResolution = 3 3 3

# voxelisation supersample; horizontal antialiasing; depricated; do not use
supersample = 0

# noise inverse gamma
noiseAlpha = 3.0
noiseBeta = 3.0

# nLocations x 1 kelvin
sensorReadings =

[mcmc]
chains = 10
stacks = 1
wallTime = 60
swapInterval = 25
initialTempFactor = 1.5
betaOptimalSwapRate = 0.24
betaAdaptRate = 0.04
betaMinFactor = 0.8
betaMaxFactor = 1.25
betaAdaptInterval = 5000
adaptionLength = 100000
cacheLength = 1000

[proposal]
initialSigma = 0.0001
initialSigmaFactor = 1.5
maxFactor = 1.25
minFactor = 0.8
optimalAccept = 0.24
adaptRate = 0.2
adaptInterval = 2500
